{
  "version": 3,
  "sources": ["../src/index.ts", "../src/api.ts"],
  "sourcesContent": ["import { callListener } from \"./api\";\n\nasync function handleWrapper(event: string) {\n  const input = Host.inputString();\n  let params = undefined;\n  if (input) {\n    params = JSON.parse(input);\n  }\n  let resp = await callListener(event, params);\n  if (resp) {\n    Host.outputString(JSON.stringify(resp));\n  }\n}\n\nexport function get_provider_scopes_wrapper() {\n  handleWrapper(\"getProviderScopes\");\n}\nexport function get_playlists_wrapper() {\n  handleWrapper(\"getPlaylists\");\n}\nexport function get_playlist_content_wrapper() {\n  handleWrapper(\"getPlaylistContent\");\n}\nexport function get_playlist_from_url_wrapper() {\n  handleWrapper(\"getPlaylistFromUrl\");\n}\nexport function get_playback_details_wrapper() {\n  handleWrapper(\"getPlaybackDetails\");\n}\nexport function search_wrapper() {\n  handleWrapper(\"getSearch\");\n}\nexport function get_recommendations_wrapper() {\n  handleWrapper(\"getRecommendations\");\n}\nexport function get_song_from_url_wrapper() {\n  handleWrapper(\"getSongFromUrl\");\n}\nexport function handle_custom_request_wrapper() {\n  handleWrapper(\"handleCustomRequest\");\n}\nexport function get_artist_songs_wrapper() {\n  handleWrapper(\"getArtistSongs\");\n}\nexport function get_album_songs_wrapper() {\n  handleWrapper(\"getAlbumSongs\");\n}\nexport function get_song_from_id_wrapper() {\n  handleWrapper(\"getSongFromId\");\n}\nexport function on_queue_changed_wrapper() {\n  handleWrapper(\"onQueueChanged\");\n}\nexport function on_volume_changed_wrapper() {\n  handleWrapper(\"onVolumeChanged\");\n}\nexport function on_player_state_changed_wrapper() {\n  handleWrapper(\"onPlayerStateChanged\");\n}\nexport function on_song_changed_wrapper() {\n  handleWrapper(\"onSongChanged\");\n}\nexport function on_seeked_wrapper() {\n  handleWrapper(\"onSeeked\");\n}\nexport function on_preferences_changed_wrapper() {\n  handleWrapper(\"onPreferencesChanged\");\n}\nexport function on_song_added_wrapper() {\n  handleWrapper(\"onSongAdded\");\n}\nexport function on_song_removed_wrapper() {\n  handleWrapper(\"onSongRemoved\");\n}\nexport function on_playlist_added_wrapper() {\n  handleWrapper(\"onPlaylistAdded\");\n}\nexport function on_playlist_removed_wrapper() {\n  handleWrapper(\"onPlaylistRemoved\");\n}\nexport function get_accounts_wrapper() {\n  handleWrapper(\"getAccounts\");\n}\nexport function perform_account_login_wrapper() {\n  handleWrapper(\"performAccountLogin\");\n}\nexport function scrobble_wrapper() {\n  handleWrapper(\"onScrobble\");\n}\nexport function oauth_callback_wrapper() {\n  handleWrapper(\"oauthCallback\");\n}\n", "import { ExtensionAPI, SongAPIOptions, Song } from \"./types\";\n\nexport interface MoosyncExtensionTemplate {\n  onStarted: () => Promise<void>;\n}\n\nlet LISTENERS: Record<string, Function> = {};\n\nfunction camelToPascal(camelCaseStr: string) {\n  // Capitalize the first character and concatenate with the rest of the string\n  return camelCaseStr.charAt(0).toUpperCase() + camelCaseStr.slice(1);\n}\n\nexport const api: ExtensionAPI = new Proxy({} as ExtensionAPI, {\n  get: (_target, prop, _receiver) => {\n    if (prop === \"on\") {\n      return (eventName: string, callback: Function) => {\n        LISTENERS[eventName] = callback;\n      };\n    }\n\n    if (typeof prop === \"string\") {\n      return (arg: unknown) => {\n        const { send_main_command } = Host.getFunctions() as any;\n        let msg: string;\n        msg = JSON.stringify({ [camelToPascal(prop)]: arg ?? [] });\n        console.log(\"parsed ext command msg\", msg, prop, arg);\n        const mem = Memory.fromString(msg);\n        const offset = send_main_command(mem.offset);\n        const response = Memory.find(offset).readString();\n        return JSON.parse(response);\n      };\n    }\n\n    return undefined;\n  },\n});\n\nexport function callListener(event: string, ...args: unknown[]) {\n  if (LISTENERS[event]) {\n    return Promise.resolve(LISTENERS[event](...args));\n  }\n  throw new Error(\"Not implemented\");\n}\n\nexport function open_sock(path: string) {\n  const { open_clientfd } = Host.getFunctions() as any;\n  const msg = Memory.fromString(path);\n  const offset = open_clientfd(msg.offset);\n  const response = Memory.find(offset).readString();\n  return JSON.parse(response);\n}\n\nexport function write_sock(sock_id: number, buf: string) {\n  const { write_sock } = Host.getFunctions() as any;\n  const msg = Memory.fromString(buf);\n  const offset = write_sock(sock_id, msg.offset);\n  const response = Memory.find(offset).readString();\n  return JSON.parse(response);\n}\n\nexport function read_sock(sock_id: number, read_len: number) {\n  const { read_sock } = Host.getFunctions() as any;\n  const offset = read_sock(sock_id, read_len);\n  const response = Memory.find(offset).readString();\n  return JSON.parse(response);\n}\n"],
  "mappings": "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",
  "names": []
}
