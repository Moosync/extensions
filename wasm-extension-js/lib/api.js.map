{
  "version": 3,
  "sources": ["../src/api.ts"],
  "sourcesContent": ["import { ExtensionAPI } from \"./types\";\n\nexport interface MoosyncExtensionTemplate {\n  onStarted: () => Promise<void>;\n}\n\nvar LISTENERS: Record<string, Function>;\n\nfunction camelToPascal(camelCaseStr: string) {\n  // Capitalize the first character and concatenate with the rest of the string\n  return camelCaseStr.charAt(0).toUpperCase() + camelCaseStr.slice(1);\n}\n\nexport const api: ExtensionAPI = new Proxy({} as ExtensionAPI, {\n  get: (_target, prop, _receiver) => {\n    if (prop === \"on\") {\n      return (eventName: string, callback: Function) => {\n        if (!LISTENERS) {\n          LISTENERS = {};\n        }\n        LISTENERS[eventName] = callback;\n      };\n    }\n\n    if (typeof prop === \"string\") {\n      return (arg: unknown) => {\n        const { send_main_command } = Host.getFunctions() as any;\n        let msg: string;\n        msg = JSON.stringify({ [camelToPascal(prop)]: arg ?? [] });\n        console.log(\"parsed ext command msg\", msg, prop, arg);\n        const mem = Memory.fromString(msg);\n        const offset = send_main_command(mem.offset);\n        const response = Memory.find(offset).readString();\n        return JSON.parse(response);\n      };\n    }\n\n    return undefined;\n  },\n});\n\nexport function callListener(event: string, ...args: unknown[]) {\n  if (LISTENERS && LISTENERS[event]) {\n    return Promise.resolve(LISTENERS[event](...args));\n  }\n}\n\nexport function open_sock(path: string) {\n  const { open_clientfd } = Host.getFunctions() as any;\n  const msg = Memory.fromString(path);\n  const offset = open_clientfd(msg.offset);\n  const response = Memory.find(offset).readString();\n  return JSON.parse(response);\n}\n\nexport function write_sock(sock_id: number, buf: string) {\n  const { write_sock } = Host.getFunctions() as any;\n  const msg = Memory.fromString(buf);\n  const offset = write_sock(sock_id, msg.offset);\n  const response = Memory.find(offset).readString();\n  return JSON.parse(response);\n}\n\nexport function read_sock(sock_id: number, read_len: number) {\n  const { read_sock } = Host.getFunctions() as any;\n  const offset = read_sock(sock_id, read_len);\n  const response = Memory.find(offset).readString();\n  return JSON.parse(response);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,IAAI;AAEJ,SAAS,cAAc,cAAsB;AAE3C,SAAO,aAAa,OAAO,CAAC,EAAE,YAAY,IAAI,aAAa,MAAM,CAAC;AACpE;AAEO,IAAM,MAAoB,IAAI,MAAM,CAAC,GAAmB;AAAA,EAC7D,KAAK,CAAC,SAAS,MAAM,cAAc;AACjC,QAAI,SAAS,MAAM;AACjB,aAAO,CAAC,WAAmB,aAAuB;AAChD,YAAI,CAAC,WAAW;AACd,sBAAY,CAAC;AAAA,QACf;AACA,kBAAU,SAAS,IAAI;AAAA,MACzB;AAAA,IACF;AAEA,QAAI,OAAO,SAAS,UAAU;AAC5B,aAAO,CAAC,QAAiB;AACvB,cAAM,EAAE,kBAAkB,IAAI,KAAK,aAAa;AAChD,YAAI;AACJ,cAAM,KAAK,UAAU,EAAE,CAAC,cAAc,IAAI,CAAC,GAAG,OAAO,CAAC,EAAE,CAAC;AACzD,gBAAQ,IAAI,0BAA0B,KAAK,MAAM,GAAG;AACpD,cAAM,MAAM,OAAO,WAAW,GAAG;AACjC,cAAM,SAAS,kBAAkB,IAAI,MAAM;AAC3C,cAAM,WAAW,OAAO,KAAK,MAAM,EAAE,WAAW;AAChD,eAAO,KAAK,MAAM,QAAQ;AAAA,MAC5B;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AACF,CAAC;AAEM,SAAS,aAAa,UAAkB,MAAiB;AAC9D,MAAI,aAAa,UAAU,KAAK,GAAG;AACjC,WAAO,QAAQ,QAAQ,UAAU,KAAK,EAAE,GAAG,IAAI,CAAC;AAAA,EAClD;AACF;AAEO,SAAS,UAAU,MAAc;AACtC,QAAM,EAAE,cAAc,IAAI,KAAK,aAAa;AAC5C,QAAM,MAAM,OAAO,WAAW,IAAI;AAClC,QAAM,SAAS,cAAc,IAAI,MAAM;AACvC,QAAM,WAAW,OAAO,KAAK,MAAM,EAAE,WAAW;AAChD,SAAO,KAAK,MAAM,QAAQ;AAC5B;AAEO,SAAS,WAAW,SAAiB,KAAa;AACvD,QAAM,EAAE,YAAAA,YAAW,IAAI,KAAK,aAAa;AACzC,QAAM,MAAM,OAAO,WAAW,GAAG;AACjC,QAAM,SAASA,YAAW,SAAS,IAAI,MAAM;AAC7C,QAAM,WAAW,OAAO,KAAK,MAAM,EAAE,WAAW;AAChD,SAAO,KAAK,MAAM,QAAQ;AAC5B;AAEO,SAAS,UAAU,SAAiB,UAAkB;AAC3D,QAAM,EAAE,WAAAC,WAAU,IAAI,KAAK,aAAa;AACxC,QAAM,SAASA,WAAU,SAAS,QAAQ;AAC1C,QAAM,WAAW,OAAO,KAAK,MAAM,EAAE,WAAW;AAChD,SAAO,KAAK,MAAM,QAAQ;AAC5B;",
  "names": ["write_sock", "read_sock"]
}
